package com.tarnag.hearts;import java.util.Arrays;import java.util.Comparator;/** * Created by Marci on 2017. 02. 28.. */public class ServerGameThread extends Thread {    public Player[] players=new Player[4];    private GameActivity gameActivity;    private CommunicationServer communicationServer;    int roundNumber = 0;    int givenCards = 0;    boolean isInGame = false;    ServerGameThread(GameActivity gameActivity, CommunicationServer communicationServer){        this.gameActivity = gameActivity;        this.communicationServer = communicationServer;    }    private void resetBeforeRound() {        isInGame = false;        givenCards = 0;    }    @Override    public void run() {        try {            Thread.sleep(400);        } catch (InterruptedException e) {            //e.printStackTrace();        }        sendingFirstInfos();        try {            Thread.sleep(150);        } catch (InterruptedException e) {            //e.printStackTrace();        }        beforeDealing();        try {            Thread.sleep(150);        } catch (InterruptedException e) {            //e.printStackTrace();        }        dealing();        //waiting for response from clients    }    public void cardGiven(String ip, String msg) {        //determine player index        int index = -1;        for (int i = 0; i < 4; i++) {            if (ip.equals(players[i].ip)) {                index = i;            }        }        //determine dest player        int destIndex = (index + roundNumber) % 4;        send(destIndex, msg);        //counting given cards        givenCards++;        if (givenCards == 12) {            isInGame = true;        }    }    private void sendingFirstInfos() {        for (int i=0;i<4;i++) {            for (int j = 0; j < 4; j++) {                send(i, "PlayerName." + Integer.toString(j) + "." + players[j].playerName);            }        }        try {            Thread.sleep(400);        } catch (InterruptedException e) {            //e.printStackTrace();        }        for (int i=0;i<4;i++){            send(i,"Position."+Integer.toString(i));        }    }    private void beforeDealing(){        //sending scores        for (int i = 0; i < 4; i++){            for (int j = 0; j < 4; j++){                send(i, "PlayerScore."+Integer.toString(j)+"."+Integer.toString(players[j].score));            }        }        try {            Thread.sleep(150);        } catch (InterruptedException e) {            //e.printStackTrace();        }        //sending round number        roundNumber++;        for (int i=0;i<4;i++){            send(i, "ROUNDNUMBER."+Integer.toString(roundNumber));        }        resetBeforeRound();    }    private void dealing(){        //creating deck        Card[] deck = new Card[52];        int index = 0;        for (int i = 1; i < 5; i++) {            for (int j = 2; j < 15; j++) {                deck[index] = new Card(i, j);                index++;            }        }        //sorting deck by random        Arrays.sort(deck, new Comparator<Card>() {            @Override            public int compare(Card card, Card t1) {                if (card.random > t1.random) return 1;                if (card.random < t1.random) return -1;                return 0;            }        });        //sending cards to players        index = 0;        for (int i = 0; i < 4; i++) {            for (int j = 0; j < 13; j++) {                Player currPlayer = players[i];                send(i,"DEAL." + deck[index].type);                try {                    sleep(20);                } catch (InterruptedException e) {                    // e.printStackTrace();                }                index++;            }        }    }    private void send(int position, String msg){        communicationServer.sendMessage(position,msg);    }}